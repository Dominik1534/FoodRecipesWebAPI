// <auto-generated />
using System;
using FoodRecipesWebAPI.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FoodRecipesWebAPI.Migrations
{
    [DbContext(typeof(RecipeDbContext))]
    [Migration("20221111204854_fix")]
    partial class fix
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FoodRecipesWebAPI.Entities.Images", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Recipe")
                        .HasColumnType("int");

                    b.Property<int?>("RecipesRecipeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RecipesRecipeId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("FoodRecipesWebAPI.Entities.Keywords", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Keyword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Recipe")
                        .HasColumnType("int");

                    b.Property<int?>("RecipesRecipeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RecipesRecipeId");

                    b.ToTable("Keywords");
                });

            modelBuilder.Entity("FoodRecipesWebAPI.Entities.RecipeIngredientParts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Recipe")
                        .HasColumnType("int");

                    b.Property<string>("RecipeIngredientPart")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RecipesRecipeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RecipesRecipeId");

                    b.ToTable("RecipeIngredientParts");
                });

            modelBuilder.Entity("FoodRecipesWebAPI.Entities.RecipeIngredientQuantities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Recipe")
                        .HasColumnType("int");

                    b.Property<string>("RecipeIngredientQuantitie")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RecipesRecipeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RecipesRecipeId");

                    b.ToTable("RecipeIngredientQuantities");
                });

            modelBuilder.Entity("FoodRecipesWebAPI.Entities.RecipeInstructions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Recipe")
                        .HasColumnType("int");

                    b.Property<string>("RecipeInstruction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RecipesRecipeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RecipesRecipeId");

                    b.ToTable("RecipeInstructions");
                });

            modelBuilder.Entity("FoodRecipesWebAPI.Entities.Recipes", b =>
                {
                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<string>("AggregatedRating")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("Calories")
                        .HasColumnType("real");

                    b.Property<float?>("CarbohydrateContent")
                        .HasColumnType("real");

                    b.Property<float?>("CholesterolContent")
                        .HasColumnType("real");

                    b.Property<string>("CookTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DatePublished")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("FatContent")
                        .HasColumnType("real");

                    b.Property<float?>("FiberContent")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrepTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("ProteinContent")
                        .HasColumnType("real");

                    b.Property<string>("RecipeCategory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipeServings")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipeYield")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReviewCount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("SodiumContent")
                        .HasColumnType("real");

                    b.Property<float?>("SugarContent")
                        .HasColumnType("real");

                    b.Property<string>("TotalTime")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RecipeId");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("FoodRecipesWebAPI.Entities.Reviews", b =>
                {
                    b.Property<string>("ReviewId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AuthorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DateModified")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DateSubmitted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rating")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RecipesRecipeId")
                        .HasColumnType("int");

                    b.Property<string>("Review")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReviewId");

                    b.HasIndex("RecipesRecipeId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("FoodRecipesWebAPI.Entities.Images", b =>
                {
                    b.HasOne("FoodRecipesWebAPI.Entities.Recipes", null)
                        .WithMany("Images")
                        .HasForeignKey("RecipesRecipeId");
                });

            modelBuilder.Entity("FoodRecipesWebAPI.Entities.Keywords", b =>
                {
                    b.HasOne("FoodRecipesWebAPI.Entities.Recipes", null)
                        .WithMany("Keywords")
                        .HasForeignKey("RecipesRecipeId");
                });

            modelBuilder.Entity("FoodRecipesWebAPI.Entities.RecipeIngredientParts", b =>
                {
                    b.HasOne("FoodRecipesWebAPI.Entities.Recipes", null)
                        .WithMany("RecipeIngredientParts")
                        .HasForeignKey("RecipesRecipeId");
                });

            modelBuilder.Entity("FoodRecipesWebAPI.Entities.RecipeIngredientQuantities", b =>
                {
                    b.HasOne("FoodRecipesWebAPI.Entities.Recipes", null)
                        .WithMany("RecipeIngredientQuantities")
                        .HasForeignKey("RecipesRecipeId");
                });

            modelBuilder.Entity("FoodRecipesWebAPI.Entities.RecipeInstructions", b =>
                {
                    b.HasOne("FoodRecipesWebAPI.Entities.Recipes", null)
                        .WithMany("RecipeInstructions")
                        .HasForeignKey("RecipesRecipeId");
                });

            modelBuilder.Entity("FoodRecipesWebAPI.Entities.Reviews", b =>
                {
                    b.HasOne("FoodRecipesWebAPI.Entities.Recipes", "Recipes")
                        .WithMany()
                        .HasForeignKey("RecipesRecipeId");

                    b.Navigation("Recipes");
                });

            modelBuilder.Entity("FoodRecipesWebAPI.Entities.Recipes", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Keywords");

                    b.Navigation("RecipeIngredientParts");

                    b.Navigation("RecipeIngredientQuantities");

                    b.Navigation("RecipeInstructions");
                });
#pragma warning restore 612, 618
        }
    }
}
